{"version":3,"sources":["components/Login.js","components/User.js","components/Admin.js","App.js","index.js"],"names":["Login","updatePage","showAlert","updateUserData","useState","uuid","setUuid","showForm","setShowForm","checkToken","token","a","axios","post","headers","res","data","success","fetchToken","user","console","log","useEffect","localToken","localStorage","getItem","id","setItem","admin","setTimeout","onClick","Container","Grid","spacing","container","direction","justify","alignItems","item","xs","Typography","variant","TextField","defaultValue","fullWidth","onChange","e","target","value","Button","color","User","userData","goToLogin","summ","setSumm","descr","setDescr","summInt","parseInt","correction","sellprice","name","size","clear","Paper","elevation","gold","payed","topay","label","Table","TableHead","TableRow","TableCell","align","TableBody","tx","map","row","key","_id","component","scope","moment","date","format","Admin","summB","setSummB","priceB","setPriceB","descrB","setDescrB","summP","setSummP","descrP","setDescrP","userP","setUserP","users","setUsers","balance","setBalance","allGold","setAllGold","payouts","setPayouts","fetchUsers","get","fetchPayouts","fetchAllGold","onClickB","priceFloat","parseFloat","replace","onClickP","usertopay","FormControl","style","minWidth","InputLabel","Select","MenuItem","find","el","findName","App","page","setPage","setUserData","alert","setAlert","show","type","text","Alert","severity","topage","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34dfcc5b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport {\r\n    Container,\r\n    Typography,\r\n    Grid,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core'\r\n\r\nconst Login = ({ updatePage, showAlert, updateUserData }) => {\r\n    const [uuid, setUuid] = useState('')\r\n    const [showForm, setShowForm] = useState(false)\r\n\r\n    const checkToken = async token => {\r\n        try {\r\n            const res = await axios.post(\r\n                '/api/v1/',\r\n                {},\r\n                { headers: { 'x-auth-token': token } }\r\n            )\r\n\r\n            if (res.data.success) fetchToken(res.data.data.user.uuid)\r\n        } catch (err) {\r\n            console.log(err)\r\n            setShowForm(true)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const localToken = localStorage.getItem('token')\r\n        if (localToken) checkToken(localToken)\r\n        else setShowForm(true)\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const fetchToken = async id => {\r\n        try {\r\n            const res = await axios.post('/api/v1/auth', { uuid: id })\r\n\r\n            if (res.data.success) {\r\n                localStorage.setItem('token', res.data.data.token)\r\n                await updateUserData()\r\n                if (res.data.data.user.admin) updatePage('admin')\r\n                else updatePage('user')\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n            showAlert(true, 'error', 'Пользователь не найден')\r\n            setTimeout(() => showAlert(false), 5000)\r\n        }\r\n    }\r\n\r\n    const onClick = async () => {\r\n        if (uuid) fetchToken(uuid)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showForm && (\r\n                <Container>\r\n                    <Grid\r\n                        spacing={3}\r\n                        container\r\n                        direction='column'\r\n                        justify='center'\r\n                        alignItems='center'\r\n                    >\r\n                        <Grid item xs>\r\n                            <Typography variant='h5'>Введите пароль</Typography>\r\n                            <TextField\r\n                                id='uuid'\r\n                                defaultValue={uuid}\r\n                                variant='outlined'\r\n                                fullWidth\r\n                                onChange={e => setUuid(e.target.value)}\r\n                            />\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                onClick={onClick}\r\n                            >\r\n                                Войти\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'\r\nimport {\r\n    Container,\r\n    Grid,\r\n    Typography,\r\n    Paper,\r\n    TextField,\r\n    Button,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell\r\n} from '@material-ui/core'\r\n\r\nconst User = ({ userData, updateUserData, goToLogin, showAlert }) => {\r\n    const [summ, setSumm] = useState('')\r\n    const [descr, setDescr] = useState('')\r\n\r\n    const onClick = async () => {\r\n        const summInt = parseInt(summ)\r\n        if (summInt > 0 && descr) {\r\n            try {\r\n                showAlert(true, 'warning', 'сохранение... ждите...')\r\n                const res = await axios.post(\r\n                    '/api/v1/addgold',\r\n                    {\r\n                        summ: summInt,\r\n                        descr: descr,\r\n                        correction: false,\r\n                        sellprice: 0\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'x-auth-token': localStorage.getItem('token')\r\n                        }\r\n                    }\r\n                )\r\n\r\n                setSumm('')\r\n                setDescr('')\r\n                showAlert(false)\r\n\r\n                if (res.data.success) updateUserData()\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onExit = () => {\r\n        localStorage.clear()\r\n        goToLogin()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Grid\r\n                    spacing={4}\r\n                    container\r\n                    direction='column'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                >\r\n                    <Grid item xs>\r\n                        <Typography variant='h5'>\r\n                            {userData.user.name}\r\n                        </Typography>\r\n                        <Button\r\n                            variant='outlined'\r\n                            color='secondary'\r\n                            size='small'\r\n                            onClick={onExit}\r\n                        >\r\n                            Выход\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>\r\n                                Занес:\r\n                                <br />\r\n                                {userData.user.gold} голды\r\n                            </Typography>\r\n                            <Typography>\r\n                                Получил:\r\n                                <br />\r\n                                {userData.user.payed} руб\r\n                            </Typography>\r\n                            <Typography>\r\n                                Баланс:\r\n                                <br />\r\n                                {userData.user.topay} руб\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>Депозит в банк</Typography>\r\n                            <TextField\r\n                                label='Gold'\r\n                                variant='outlined'\r\n                                value={summ}\r\n                                onChange={e => setSumm(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <TextField\r\n                                label='Персонаж'\r\n                                variant='outlined'\r\n                                value={descr}\r\n                                onChange={e => setDescr(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                onClick={onClick}\r\n                            >\r\n                                Внести\r\n                            </Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography variant='h5'>\r\n                                История операций с банком (последние 10)\r\n                            </Typography>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Дата</TableCell>\r\n                                        <TableCell>Сумма</TableCell>\r\n                                        <TableCell align='right'>\r\n                                            Персонаж\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {userData.tx.map(row => (\r\n                                        <TableRow key={row._id}>\r\n                                            <TableCell\r\n                                                component='th'\r\n                                                scope='row'\r\n                                            >\r\n                                                {moment(row.date).format('lll')}\r\n                                            </TableCell>\r\n                                            <TableCell>{row.summ}</TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {row.descr}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'\r\nimport {\r\n    Container,\r\n    Grid,\r\n    Typography,\r\n    Paper,\r\n    TextField,\r\n    Button,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem\r\n} from '@material-ui/core'\r\n\r\nconst Admin = ({ userData, updateUserData, goToLogin, showAlert }) => {\r\n    const [summ, setSumm] = useState('')\r\n    const [descr, setDescr] = useState('')\r\n\r\n    const [summB, setSummB] = useState('')\r\n    const [priceB, setPriceB] = useState('')\r\n    const [descrB, setDescrB] = useState('')\r\n\r\n    const [summP, setSummP] = useState('')\r\n    const [descrP, setDescrP] = useState('')\r\n    const [userP, setUserP] = useState('')\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [balance, setBalance] = useState()\r\n    const [allGold, setAllGold] = useState([])\r\n    const [payouts, setPayouts] = useState([])\r\n\r\n    const fetchUsers = async () => {\r\n        try {\r\n            const res = await axios.get('/api/v1', {\r\n                headers: { 'x-auth-token': localStorage.getItem('token') }\r\n            })\r\n            if (res.data.success) setUsers(res.data.data)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const fetchPayouts = async () => {\r\n        try {\r\n            const res = await axios.post(\r\n                '/api/v1/payouts',\r\n                {},\r\n                {\r\n                    headers: { 'x-auth-token': localStorage.getItem('token') }\r\n                }\r\n            )\r\n            if (res.data.success) setPayouts(res.data.data.tx)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const fetchAllGold = async () => {\r\n        try {\r\n            const res = await axios.post(\r\n                '/api/v1/allgold',\r\n                {},\r\n                {\r\n                    headers: { 'x-auth-token': localStorage.getItem('token') }\r\n                }\r\n            )\r\n            if (res.data.success) {\r\n                setAllGold(res.data.data.tx)\r\n                setBalance(res.data.data.balance)\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsers()\r\n        fetchPayouts()\r\n        fetchAllGold()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onClick = async () => {\r\n        const summInt = parseInt(summ)\r\n        if (summInt > 0 && descr) {\r\n            try {\r\n                showAlert(true, 'warning', 'сохранение... ждите...')\r\n\r\n                const res = await axios.post(\r\n                    '/api/v1/addgold',\r\n                    {\r\n                        summ: summInt,\r\n                        descr: descr,\r\n                        correction: false,\r\n                        sellprice: 0\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'x-auth-token': localStorage.getItem('token')\r\n                        }\r\n                    }\r\n                )\r\n\r\n                setSumm('')\r\n                setDescr('')\r\n                showAlert(false)\r\n\r\n                if (res.data.success) {\r\n                    updateUserData()\r\n                    fetchAllGold()\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onClickB = async () => {\r\n        const summInt = -parseInt(summB)\r\n        const priceFloat = parseFloat(priceB.replace(',', '.'))\r\n        if (summInt < 0 && descrB && priceFloat > 0) {\r\n            try {\r\n                showAlert(true, 'warning', 'сохранение... ждите...')\r\n\r\n                const res = await axios.post(\r\n                    '/api/v1/addgold',\r\n                    {\r\n                        summ: summInt,\r\n                        descr: descrB,\r\n                        correction: false,\r\n                        sellprice: priceFloat\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'x-auth-token': localStorage.getItem('token')\r\n                        }\r\n                    }\r\n                )\r\n\r\n                setSummB('')\r\n                setPriceB('')\r\n                setDescrB('')\r\n                showAlert(false)\r\n\r\n                if (res.data.success) {\r\n                    updateUserData()\r\n                    fetchAllGold()\r\n                    fetchUsers()\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onClickP = async () => {\r\n        const summInt = parseInt(summP)\r\n        if (summInt > 0 && descrP && userP) {\r\n            try {\r\n                showAlert(true, 'warning', 'сохранение... ждите...')\r\n\r\n                const res = await axios.post(\r\n                    '/api/v1/pay',\r\n                    {\r\n                        summ: summInt,\r\n                        usertopay: userP,\r\n                        descr: descrP\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            'x-auth-token': localStorage.getItem('token')\r\n                        }\r\n                    }\r\n                )\r\n\r\n                setSummP('')\r\n                setDescrP('')\r\n                setUserP('')\r\n                showAlert(false)\r\n\r\n                if (res.data.success) {\r\n                    updateUserData()\r\n                    fetchUsers()\r\n                    fetchPayouts()\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n\r\n    const findName = id => {\r\n        const user = users.find(el => el._id === id)\r\n        if (user) return user.name\r\n        else return ''\r\n    }\r\n\r\n    const onExit = () => {\r\n        localStorage.clear()\r\n        goToLogin()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Grid\r\n                    spacing={4}\r\n                    container\r\n                    direction='column'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                >\r\n                    <Grid item xs>\r\n                        <Typography variant='h5'>\r\n                            {userData.user.name}\r\n                        </Typography>\r\n                        <Button\r\n                            variant='outlined'\r\n                            color='secondary'\r\n                            size='small'\r\n                            onClick={onExit}\r\n                        >\r\n                            Выход\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>\r\n                                Занес:\r\n                                <br />\r\n                                {userData.user.gold} голды\r\n                            </Typography>\r\n                            <Typography>\r\n                                Получил:\r\n                                <br />\r\n                                {userData.user.payed} руб\r\n                            </Typography>\r\n                            <Typography>\r\n                                Баланс:\r\n                                <br />\r\n                                {userData.user.topay} руб\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>Депозит в банк</Typography>\r\n                            <TextField\r\n                                label='Gold'\r\n                                variant='outlined'\r\n                                value={summ}\r\n                                onChange={e => setSumm(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <TextField\r\n                                label='Персонаж'\r\n                                variant='outlined'\r\n                                value={descr}\r\n                                onChange={e => setDescr(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                onClick={onClick}\r\n                            >\r\n                                Внести\r\n                            </Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>Продажа на бирже</Typography>\r\n                            <TextField\r\n                                label='Количество'\r\n                                variant='outlined'\r\n                                value={summB}\r\n                                onChange={e => setSummB(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <TextField\r\n                                label='Цена'\r\n                                variant='outlined'\r\n                                value={priceB}\r\n                                onChange={e => setPriceB(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <TextField\r\n                                label='Комментарий'\r\n                                variant='outlined'\r\n                                value={descrB}\r\n                                onChange={e => setDescrB(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                onClick={onClickB}\r\n                            >\r\n                                Внести\r\n                            </Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography>Выплата игроку</Typography>\r\n                            <FormControl style={{ minWidth: 210 }}>\r\n                                <InputLabel>Имя игрока</InputLabel>\r\n                                <Select\r\n                                    value={userP}\r\n                                    onChange={e => setUserP(e.target.value)}\r\n                                >\r\n                                    {users.map(user => (\r\n                                        <MenuItem\r\n                                            key={user._id}\r\n                                            value={user._id}\r\n                                        >\r\n                                            {user.name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <br />\r\n                            <TextField\r\n                                label='Сумма'\r\n                                variant='outlined'\r\n                                value={summP}\r\n                                onChange={e => setSummP(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <TextField\r\n                                label='Комментарий'\r\n                                variant='outlined'\r\n                                value={descrP}\r\n                                onChange={e => setDescrP(e.target.value)}\r\n                            />\r\n                            <br />\r\n                            <Button\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                onClick={onClickP}\r\n                            >\r\n                                Внести\r\n                            </Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography variant='h5'>\r\n                                Балансы игроков\r\n                            </Typography>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Имя</TableCell>\r\n                                        <TableCell align='right'>\r\n                                            Сумма\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {users.map(row => (\r\n                                        <TableRow key={row._id}>\r\n                                            <TableCell\r\n                                                component='th'\r\n                                                scope='row'\r\n                                            >\r\n                                                {row.name}\r\n                                            </TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {row.topay}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography variant='h5'>\r\n                                История операций с банком (последние 20)\r\n                                <br />\r\n                                Текущий баланс: {balance}\r\n                            </Typography>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Дата</TableCell>\r\n                                        <TableCell>Сумма</TableCell>\r\n                                        <TableCell align='right'>\r\n                                            Комментарий\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {allGold.map(row => (\r\n                                        <TableRow key={row._id}>\r\n                                            <TableCell\r\n                                                component='th'\r\n                                                scope='row'\r\n                                            >\r\n                                                {moment(row.date).format('lll')}\r\n                                            </TableCell>\r\n                                            <TableCell>{row.summ}</TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {row.descr}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Paper elevation={3}>\r\n                            <Typography variant='h5'>\r\n                                История выплат (последние 10)\r\n                            </Typography>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Дата</TableCell>\r\n                                        <TableCell>Игрок</TableCell>\r\n                                        <TableCell>Сумма</TableCell>\r\n                                        <TableCell align='right'>\r\n                                            Комментарий\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {payouts.map(row => (\r\n                                        <TableRow key={row._id}>\r\n                                            <TableCell\r\n                                                component='th'\r\n                                                scope='row'\r\n                                            >\r\n                                                {moment(row.date).format('lll')}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {findName(row.user)}\r\n                                            </TableCell>\r\n                                            <TableCell>{row.summ}</TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {row.descr}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport axios from 'axios'\r\nimport Login from './components/Login'\r\nimport User from './components/User'\r\nimport Admin from './components/Admin'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst App = () => {\r\n    const [page, setPage] = useState('login')\r\n    const [userData, setUserData] = useState({})\r\n    const [alert, setAlert] = useState({})\r\n\r\n    const updatePage = topage => setPage(topage)\r\n\r\n    const updateUserData = async () => {\r\n        try {\r\n            const res = await axios.post(\r\n                '/api/v1/',\r\n                {},\r\n                { headers: { 'x-auth-token': localStorage.getItem('token') } }\r\n            )\r\n\r\n            if (res.data.success) setUserData(res.data.data)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const goToLogin = () => setPage('login')\r\n\r\n    const showAlert = (show, type, text) => setAlert({ show, type, text })\r\n\r\n    return (\r\n        <>\r\n            {alert.show && <Alert severity={alert.type}>{alert.text}</Alert>}\r\n            {page === 'login' && (\r\n                <Login\r\n                    updatePage={updatePage}\r\n                    showAlert={showAlert}\r\n                    updateUserData={updateUserData}\r\n                />\r\n            )}\r\n            {page === 'user' && (\r\n                <User\r\n                    userData={userData}\r\n                    updateUserData={updateUserData}\r\n                    goToLogin={goToLogin}\r\n                    showAlert={showAlert}\r\n                />\r\n            )}\r\n            {page === 'admin' && (\r\n                <Admin\r\n                    userData={userData}\r\n                    updateUserData={updateUserData}\r\n                    goToLogin={goToLogin}\r\n                    showAlert={showAlert}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport WebFont from 'webfontloader'\nWebFont.load({ google: { families: ['Roboto:300,400,500'] } })\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}